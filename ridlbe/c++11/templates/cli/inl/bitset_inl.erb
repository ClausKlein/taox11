
// generated from <%= ridl_template_path %>
%#
%#  Constructor inlines
%#
%#  Initializer CTOR
%# Required with C++17, with C++20 we can use {} for bitfields
%_ms = bitfields.dup.find_all {|bitf| !bitf.cxxname.empty? }
inline <%= scoped_cxxtype %>::<%= cxxname %> ()
%  _pfx = nil
%  unless base.nil?
  : <%= base.cxxname %> ()
%  end
% str = ""
% bitfields.find_all {|bitf| !bitf.cxxname.empty? }.each do |_m|
%   str = "#{str}#{_pfx}#{_m.default_value}"
%   _pfx = ', ' unless _pfx
% end
  <% if base.nil? %>:<% else %>,<% end %> _taox11_<%= cxxname.downcase %> { <%= str %> }
{
}

%_ms = bitfields.dup.find_all {|bitf| !bitf.cxxname.empty? }
inline <%= scoped_cxxtype %>::<%= cxxname %> (
%  unless base.nil?
  <%= base.cxxname %> _base<%= _ms.empty? ? ')' : ',' %>
%  end
%  unless _ms.empty?
%    while !_ms.empty?
%      _m = _ms.shift
  <%= "#{_m.cxx_byval_type} #{_m.cxxname}" %><%= _ms.empty? ? ')' : ',' %>
%    end
%  end
%  _pfx = nil
%  unless base.nil?
  : <%= base.cxxname %> (std::move(_base))<% unless _ms.empty? %>,<% end %>
%  end
% str = ""
% bitfields.find_all {|bitf| !bitf.cxxname.empty? }.each do |_m|
%   str = "#{str}#{_pfx}#{_m.cxxname}"
%   _pfx = ', ' unless _pfx
% end
  <% if base.nil? %>:<% else %>,<% end %> _taox11_<%= cxxname.downcase %> { <%= str %> }
{
}

inline void <%= scoped_cxxtype %>::swap (<%= scoped_cxx_out_type %> s)
{
%# Add support for base
%# bitfields.each do |_m|
  std::swap (this->_taox11_<%= cxxname.downcase %>, s._taox11_<%= cxxname.downcase %>);
%# end
}

inline bool <%= scoped_cxxtype %>::operator== (const <%= cxxname %> &rhs) const {
  return
%unless base.nil?
    <%= base.cxxname %>::operator==(rhs) &&
%end
%_ms = bitfields.dup.find_all {|bitf| !bitf.cxxname.empty? }
%unless _ms.empty?
%  while !_ms.empty?
%    _m = _ms.shift
    (this->_taox11_<%= cxxname.downcase %>.<%= _m.cxxname %> == rhs._taox11_<%= cxxname.downcase %>.<%= _m.cxxname %>)<%= _ms.empty? ? ';' : ' &&' %>
%  end
%end
}

inline bool <%= scoped_cxxtype %>::operator!= (const <%= cxxname %> &rhs) const
{
  return !this->operator== (rhs);
}
