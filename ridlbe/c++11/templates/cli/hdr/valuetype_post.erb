
  // generated from <%= ridl_template_path %>
public:
  static inline const std::string& _repository_id ()
  {
    return __<%= cxxname.downcase %>_repository_id;
  }

% unless (_vt_ops = operations).empty?
  // Operations
%   _vt_ops.each do |_op|
%     nest { _op.visit_operation }
%   end

% end
% unless (_vt_atts = attributes).empty?
  // Attributes
%   _vt_atts.each do |_att|
%     nest { _att.visit_attribute }
%   end

% end
% unless (_vt_pub_members = members.find_all { |_m| _m.is_public? }).empty?
  /// @name Public state members
  //@{
%   _vt_pub_members.each do |_m|
  virtual void <%= _m.cxxname %> (<%= _m.cxx_in_type %> _x11_<%= _m.cxxname %>) = 0;
%     unless _m.is_pod? || _m.is_reference?
  virtual void <%= _m.cxxname %> (<%= _m.cxx_move_type %> _x11_<%= _m.cxxname %>) = 0;
%     end
  virtual <%= _m.cxx_in_type %> <%= _m.cxxname %> () const = 0;
  virtual <%= _m.cxx_out_type %> <%= _m.cxxname %> () = 0;
%   end
  //@}
% end
% unless (_vt_priv_members = members.find_all { |_m| !_m.is_public? }).empty?

protected:
  /// @name Private state members
  //@{
%   _vt_priv_members.each do |_m|
  virtual void <%= _m.cxxname %> (<%= _m.cxx_in_type %> _x11_<%= _m.cxxname %>) = 0;
%     unless _m.is_pod? || _m.is_reference?
  virtual void <%= _m.cxxname %> (<%= _m.cxx_move_type %> _x11_<%= _m.cxxname %>) = 0;
%     end
  virtual <%= _m.cxx_in_type %> <%= _m.cxxname %> () const = 0;
  virtual <%= _m.cxx_out_type %> <%= _m.cxxname %> () = 0;
%   end
  //@}
% end
% unless is_abstract?

protected:
  virtual bool
  _obv_marshal_<%= scoped_cxxname.scope_to_cxxname %>_v (TAO_OutputCDR &, TAO_ChunkInfo &) const = 0;

  virtual bool
  _obv_unmarshal_<%= scoped_cxxname.scope_to_cxxname %>_v (TAO_InputCDR &, TAO_ChunkInfo &) = 0;
% end
}; // class <%= cxxname %>
%#
% visit_template('typecode') if generate_typecode_support?
