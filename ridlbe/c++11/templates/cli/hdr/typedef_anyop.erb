
// generated from <%= ridl_template_path %>
// Unaliased type : <%= resolved_cxxtype %>
% alias_md5 =  resolved_cxxtype.to_md5
// MD5            : <%= alias_md5 %>
#if !defined (_ALIAS_ANYOP_<%= alias_md5 %>_DECL_)
#define _ALIAS_ANYOP_<%= alias_md5 %>_DECL_

#define _ALIAS_ANYOP_<%= scoped_cxxname.scope_to_cxxname %>_IMPL_
<%= anytypecode_export_macro %> void
_any_cp_in_<%= scoped_cxxname.scope_to_cxxname %> (
    TAOX11_CORBA::Any&,
    <%= scoped_cxx_in_type %>);
<%= anytypecode_export_macro %> void
_any_mv_in_<%= scoped_cxxname.scope_to_cxxname %> (
    TAOX11_CORBA::Any&,
    <%= scoped_cxx_move_type %>);
<%= anytypecode_export_macro %> bool
_any_out_<%= scoped_cxxname.scope_to_cxxname %> (
    const TAOX11_CORBA::Any&,
    <%= scoped_cxx_out_type %>);

/// Copying any insertion operator
inline void operator<<= (TAOX11_CORBA::Any& any, <%= scoped_cxx_in_type %> _val)
{
  _any_cp_in_<%= scoped_cxxname.scope_to_cxxname %> (any, _val);
}
/// Non-copying any insertion operator
inline void operator<<= (TAOX11_CORBA::Any& any, <%= scoped_cxx_move_type %> _val)
{
  _any_mv_in_<%= scoped_cxxname.scope_to_cxxname %> (any, std::move (_val));
}
/// Any extraction operator
inline bool operator>>= (const TAOX11_CORBA::Any& any, <%= scoped_cxx_out_type %> _val)
{
  return _any_out_<%= scoped_cxxname.scope_to_cxxname %> (any, _val);
}
#endif // _ALIAS_ANYOP_<%= alias_md5 %>_DECL_
