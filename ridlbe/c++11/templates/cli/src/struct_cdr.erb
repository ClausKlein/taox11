
// generated from <%= ridl_template_path %>
TAO_CORBA::Boolean operator<< (TAO_OutputCDR &<% if member_count > 0 || !base.nil? %>strm<% end %>, const <%= scoped_cxxname %> &<% if member_count > 0 || !base.nil? %>_tao_aggregate<% end %>)
{
% if member_count > 0 || !base.nil?
  return
% unless base.nil?
    (strm << static_cast<<%= base.cxxname %>>(_tao_aggregate))<%= ((member_count > 0)  ? ' &&' : ';') %>
% end
%   _n = member_count-1
%   members.each_with_index do |_m, _i|
    (strm << <%= _m.cdr_from_fmt % "_tao_aggregate.#{_m.cxxname} ()" %>)<%= ((_i < _n ) ? ' &&' : ';') %>
%   end
% else
  return true;
% end
}

TAO_CORBA::Boolean operator>> (TAO_InputCDR &<% if member_count > 0 || !base.nil? %>strm<% end %>, <%= scoped_cxxname %> &<% if member_count > 0 || !base.nil? %>_tao_aggregate<% end %>)
{
% if member_count > 0 || !base.nil?
  return
% unless base.nil?
    (strm >> static_cast<<%= base.cxxname %>&>(_tao_aggregate))<%= ((member_count > 0)  ? ' &&' : ';') %>
% end
%   members.each_with_index do |_m, _i|
    (strm >> <%= _m.cdr_to_fmt % "_tao_aggregate.#{_m.cxxname} ()" %>)<%= ((_i < _n) ? ' &&' : ';') %>
%   end
% else
  return true;
% end
}
%members.each do |_m|
% if _m.optional?

// Unaliased type : <%= _m.cxx_member_type %>
% alias_md5 =  _m.cxx_member_type.to_md5
// MD5            : <%= alias_md5 %>
#if !defined(_CDR_<%= alias_md5 %>_OPTIONAL_IMPL_)
#define _CDR_<%= alias_md5 %>_OPTIONAL_IMPL_
TAO_CORBA::Boolean operator<< (TAO_OutputCDR&strm, const <%= _m.cxx_member_type %>&_val)
{
  return taox11_optional_cdr<<%= _m.cxx_member_type %>>::insert (strm,  _val);
}

TAO_CORBA::Boolean operator>> (TAO_InputCDR& strm, <%= _m.cxx_member_type %>&_val)
{
  return taox11_optional_cdr<<%= _m.cxx_member_type %>>::extract (strm,  _val);
}
#endif
% end
%end
