/**
 * @file    test.idl
 * @author  Johnny Willemsen
 *
 * @copyright Copyright (c) Remedy IT Expertise BV
 */

/// Put the interfaces in a module, to avoid global namespace pollution

struct Global
{
  long x;
};

module Test
{
  enum DataType
  {
    dtEmpty,
    dtLong,
    dtShort,
    dtString,
    dtPoint,
    dtTrack,
    dtGlobal
  };

  struct Point
  {
    long x;
    long y;
  };

  struct Track
  {
    long id;
    Point p;
  };

  union Data switch (DataType)
    {
      case dtLong: long longData;
      case dtShort: short shortData;
      case dtString: string stringData;
      case dtPoint: Point pointData;
      case dtTrack: Track trackData;
      case dtGlobal: Global globalData;
      // by default (implicit), empty union
    };

  union DefaultData switch (short)
    {
      case 1: long longData;
      case 2: short shortData;
      default: long defData;
    };

  union X_Union switch (short)
    {
      case 0: string x_test;
      case 1: long   x_long;
    };

  union Y_Union switch (short)
    {
      case 0: long   y_long;
      case 1: string y_test;

    };

  // Union with several cases
  union Z_Union switch (short)
    {
      case 0: long z_long;
      case 1:
      case 2:
      case 3: string z_string;
      case 4: boolean z_bool;
    };

  /// A very simple interface
  interface Foo
  {
    boolean pass_union (in Data s);
    boolean pass_default_union (in DefaultData s);

    Data return_union ();
    DefaultData return_default_union ();
    X_Union return_x_union ();
    Y_Union return_y_union ();
    Z_Union return_z_union (in Z_Union z);

    boolean get_union (out Data s);
    boolean get_default_union (out DefaultData dd);

    boolean update_union (inout Data s);
    boolean update_default_union (inout DefaultData dd);

    /// A method to shutdown the ORB
    /**
     * This method is used to simplify the test shutdown process
     */
    oneway void shutdown ();
  };
};
