/**
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT Expertise BV
 *        The Netherlands
 *        https://www.remedy.nl
 */

#ifndef __RIDL_TESTCP_H_IHIFDICE_INCLUDED__
#define __RIDL_TESTCP_H_IHIFDICE_INCLUDED__

#pragma once

#include "tao/x11/anyinsert_policy_t.h"
#include "tao/x11/map_cdr_t.h"
#include "tao/x11/basic_argument_t.h"

#include /**/ "tao/x11/base/versionx11.h"

#if TAOX11_MAJOR_VERSION != 2 || TAOX11_MINOR_VERSION != 6 || TAOX11_MICRO_VERSION != 0
#error This file was generated with another RIDL C++11 backend version (2.6.0). Please re-generate.
#endif

// generated from StubProxyHeaderObjRefTraitsWriter#pre_visit
// generated from StubProxyHeaderCDRWriter#pre_visit

// generated from c++11/templates/cli/prx/map_cdr
// Unaliased type : std::map<std::string, int32_t>
// MD5            : 9591659AF1C35F72B6270EE9C6D3AFEF
#if !defined (_ALIAS_9591659AF1C35F72B6270EE9C6D3AFEF_ARG_TRAITS_)
#define _ALIAS_9591659AF1C35F72B6270EE9C6D3AFEF_ARG_TRAITS_
/// Argument traits specializations for StringLongMap
template<>
class TAOX11_NAMESPACE::Arg_Traits<::StringLongMap>
  : public Basic_Arg_Traits_T<::StringLongMap, Any_Insert_Policy_Noop>
{
};

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// @name CDR streaming operator specializations for StringLongMap
//@{
inline TAO_CORBA::Boolean operator<< (TAO_OutputCDR& cdr, const IDL::traits<::StringLongMap>::value_type& v)
{
  return taox11_map_cdr<::StringLongMap::key_type, ::StringLongMap::mapped_type>::insert (cdr, v);
}
inline TAO_CORBA::Boolean operator>> (TAO_InputCDR& cdr, IDL::traits<::StringLongMap>::value_type& v)
{
  return taox11_map_cdr<::StringLongMap::key_type, ::StringLongMap::mapped_type>::extract (cdr, v);
}
//@}

TAO_END_VERSIONED_NAMESPACE_DECL
# endif // !_ALIAS_9591659AF1C35F72B6270EE9C6D3AFEF_ARG_TRAITS_

// generated from c++11/templates/cli/prx/string_cdr
// Unaliased type : TAOX11_IDL::bounded_string<650>
// MD5            : 8A4C2C8D2E43F29AF2FF47B029780F14
#if !defined (_ALIAS_8A4C2C8D2E43F29AF2FF47B029780F14_ARG_TRAITS_)
#define _ALIAS_8A4C2C8D2E43F29AF2FF47B029780F14_ARG_TRAITS_
/// Argument traits specializations for bds
template<>
class TAOX11_NAMESPACE::Arg_Traits<TAOX11_IDL::bounded_string<650>>
  : public Basic_Arg_Traits_T<TAOX11_IDL::bounded_string<650>, Any_Insert_Policy_Noop>
{
};

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// CDR streaming methods for bds
bool _cdr_in_bds (TAO_OutputCDR &, const IDL::traits<TAOX11_IDL::bounded_string<650>>::value_type&);
bool _cdr_out_bds (TAO_InputCDR &, IDL::traits<TAOX11_IDL::bounded_string<650>>::value_type&);
#define _ALIAS_bds_CDR_OPS_IMPL_

/// @name CDR streaming operator specializations for bds
//@{
inline TAO_CORBA::Boolean operator<< (TAO_OutputCDR &cdr, const IDL::traits<TAOX11_IDL::bounded_string<650>>::value_type &v)
{
  return _cdr_in_bds (cdr, v);
}
inline TAO_CORBA::Boolean operator>> (TAO_InputCDR &cdr, IDL::traits<TAOX11_IDL::bounded_string<650>>::value_type& v)
{
  return _cdr_out_bds (cdr, v);
}
//@}

TAO_END_VERSIONED_NAMESPACE_DECL
# endif // !_ALIAS_8A4C2C8D2E43F29AF2FF47B029780F14_ARG_TRAITS_

// generated from c++11/templates/cli/prx/struct_cdr
# if !defined (_BAR_TRAITS_)
# define _BAR_TRAITS_
/// Argument traits specializations for bar
template<>
class TAOX11_NAMESPACE::Arg_Traits<::bar>
  : public Basic_Arg_Traits_T<::bar, Any_Insert_Policy_Noop>
{
};
# endif // !_BAR_TRAITS_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// @name CDR streaming operator specializations for bar
//@{
TAO_CORBA::Boolean operator<< (TAO_OutputCDR&, const bar&);
TAO_CORBA::Boolean operator>> (TAO_InputCDR&, bar&);
//@}
/// @name CDR streaming operator specializations for IDL::optional<int16_t>
//@{
TAO_CORBA::Boolean operator<< (TAO_OutputCDR&, const IDL::optional<int16_t>&);
TAO_CORBA::Boolean operator>> (TAO_InputCDR&, IDL::optional<int16_t>&);
//@}

TAO_END_VERSIONED_NAMESPACE_DECL


#endif /* __RIDL_TESTCP_H_IHIFDICE_INCLUDED__ */

// -*- END -*-
