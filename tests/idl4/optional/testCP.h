/**
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT Expertise BV
 *        The Netherlands
 *        https://www.remedy.nl
 */

#ifndef __RIDL_TESTCP_H_EEHHIGHB_INCLUDED__
#define __RIDL_TESTCP_H_EEHHIGHB_INCLUDED__

#pragma once

#include "tao/x11/anyinsert_policy_t.h"
#include "tao/x11/basic_argument_t.h"
#include "tao/x11/optional_cdr_t.h"

#include /**/ "tao/x11/base/versionx11.h"

#if TAOX11_MAJOR_VERSION != 2 || TAOX11_MINOR_VERSION != 6 || TAOX11_MICRO_VERSION != 0
#error This file was generated with another RIDL C++11 backend version (2.6.0). Please re-generate.
#endif

// generated from StubProxyHeaderObjRefTraitsWriter#pre_visit
// generated from StubProxyHeaderCDRWriter#pre_visit

// generated from c++11/templates/cli/prx/struct_cdr
# if !defined (_BAR_TRAITS_)
# define _BAR_TRAITS_
/// Argument traits specializations for bar
template<>
class TAOX11_NAMESPACE::Arg_Traits<::bar>
  : public Basic_Arg_Traits_T<::bar, Any_Insert_Policy_Noop>
{
};
# endif // !_BAR_TRAITS_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// @name CDR streaming operator specializations for bar
//@{
TAO_CORBA::Boolean operator<< (TAO_OutputCDR&, const bar&);
TAO_CORBA::Boolean operator>> (TAO_InputCDR&, bar&);
//@}
// Unaliased type : IDL::optional<int16_t>
// MD5            : 390A720FCF9D6B2326C7F41A8BC2534C
#if !defined(_CDR_390A720FCF9D6B2326C7F41A8BC2534C_OPTIONAL_DECL_)
#define _CDR_390A720FCF9D6B2326C7F41A8BC2534C_OPTIONAL_DECL_
/// @name CDR streaming operator specializations for IDL::optional<int16_t>
//@{
inline TAO_CORBA::Boolean operator<< (TAO_OutputCDR& _strm, const IDL::optional<int16_t>& _val)
{
  return taox11_optional_cdr<IDL::optional<int16_t>>::insert (_strm,  _val);
}
TAO_CORBA::Boolean operator>> (TAO_InputCDR& _strm, IDL::optional<int16_t>& _val)
{
  return taox11_optional_cdr<IDL::optional<int16_t>>::extract (_strm,  _val);
}
//@}
#endif
// Unaliased type : IDL::optional<int16_t>
// MD5            : 390A720FCF9D6B2326C7F41A8BC2534C
#if !defined(_CDR_390A720FCF9D6B2326C7F41A8BC2534C_OPTIONAL_DECL_)
#define _CDR_390A720FCF9D6B2326C7F41A8BC2534C_OPTIONAL_DECL_
/// @name CDR streaming operator specializations for IDL::optional<int16_t>
//@{
inline TAO_CORBA::Boolean operator<< (TAO_OutputCDR& _strm, const IDL::optional<int16_t>& _val)
{
  return taox11_optional_cdr<IDL::optional<int16_t>>::insert (_strm,  _val);
}
TAO_CORBA::Boolean operator>> (TAO_InputCDR& _strm, IDL::optional<int16_t>& _val)
{
  return taox11_optional_cdr<IDL::optional<int16_t>>::extract (_strm,  _val);
}
//@}
#endif
// Unaliased type : IDL::optional<std::string>
// MD5            : A982838BA1CB55023DC96331D8B18A34
#if !defined(_CDR_A982838BA1CB55023DC96331D8B18A34_OPTIONAL_DECL_)
#define _CDR_A982838BA1CB55023DC96331D8B18A34_OPTIONAL_DECL_
/// @name CDR streaming operator specializations for IDL::optional<std::string>
//@{
inline TAO_CORBA::Boolean operator<< (TAO_OutputCDR& _strm, const IDL::optional<std::string>& _val)
{
  return taox11_optional_cdr<IDL::optional<std::string>>::insert (_strm,  _val);
}
TAO_CORBA::Boolean operator>> (TAO_InputCDR& _strm, IDL::optional<std::string>& _val)
{
  return taox11_optional_cdr<IDL::optional<std::string>>::extract (_strm,  _val);
}
//@}
#endif

TAO_END_VERSIONED_NAMESPACE_DECL


#endif /* __RIDL_TESTCP_H_EEHHIGHB_INCLUDED__ */

// -*- END -*-
