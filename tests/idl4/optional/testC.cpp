/**
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT Expertise BV
 *        The Netherlands
 *        https://www.remedy.nl
 */

#define __TAOX11_INCLUDE_STUB_PROXY__

#if __has_include("tao/x11/base/tao_corba.h")
# include "tao/x11/base/tao_corba.h"
#endif
#include "tao/CDR.h"
#include "tao/x11/basic_arguments.h"
#include "tao/x11/cdr_long_double.h"
#include "tao/x11/base/tao_corba.h"

#include "testC.h"
// generated from StubProxySourceCDRWriter#pre_visit
TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_CORBA::Boolean operator<< (TAO_OutputCDR&strm, const IDL::optional<int16_t>&_val)
{
  return taox11_optional_cdr<IDL::optional<int16_t>>::insert (strm,  _val);
}

TAO_CORBA::Boolean operator>> (TAO_InputCDR& strm, IDL::optional<int16_t>&_val)
{
  return taox11_optional_cdr<IDL::optional<int16_t>>::extract (strm,  _val);
}


// generated from c++11/templates/cli/src/string_cdr
#if defined(_ALIAS_bds_CDR_OPS_IMPL_)
bool _cdr_in_bds (
  TAO_OutputCDR &strm,
  const IDL::traits<TAOX11_IDL::bounded_string<650>>::value_type &_bstr)
{
  return (strm << ACE_OutputCDR::from_std_string (_bstr, 650));
}

bool _cdr_out_bds (
  TAO_InputCDR &strm,
  IDL::traits<TAOX11_IDL::bounded_string<650>>::value_type &_bstr)
{
  return (strm >> ACE_InputCDR::to_std_string (_bstr, 650));
}
#endif // _ALIAS_bds_CDR_OPS_IMPL_

// generated from c++11/templates/cli/src/struct_cdr
TAO_CORBA::Boolean operator<< (TAO_OutputCDR &strm, const bar &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.x ()) &&
    (strm << _tao_aggregate.y ()) &&
    (strm << _tao_aggregate.z ());
}

TAO_CORBA::Boolean operator>> (TAO_InputCDR &strm, bar &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.x ()) &&
    (strm >> _tao_aggregate.y ()) &&
    (strm >> _tao_aggregate.z ());
}

TAO_END_VERSIONED_NAMESPACE_DECL

// -*- END -*-
